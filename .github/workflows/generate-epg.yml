name: Generar EPG XMLTV

on:
  schedule:
    # Se ejecuta todos los d√≠as a las 14:05 UTC (8:05 AM en Costa Rica, UTC-6)
    # para asegurar que la gu√≠a de la web ya se haya actualizado.
    - cron: "5 14 * * *"
  # Permite la ejecuci√≥n manual desde la pesta√±a de Actions en GitHub
  workflow_dispatch:
    inputs:
      force_full_week:
        description: 'Forzar modo semana completa'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      discover_channels:
        description: 'Auto-descubrir canales nuevos'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

permissions:
  # Se necesita permiso de escritura para poder hacer 'git push' con los cambios.
  contents: write

jobs:
  build-and-commit-epg:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Clonar el repositorio
        uses: actions/checkout@v4

      - name: 2. Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'

      - name: 3. Instalar un navegador (base para Chrome/Brave)
        uses: browser-actions/setup-chrome@v1

      - name: 4. Instalar dependencias de Python
        run: |
<<<<<<< HEAD
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions-bot@github.com"
          git add -f epgpersonal.xml.gz
          # Comprueba si hay cambios para commitear. Si no hay, no hace nada.
          if ! git diff --staged --quiet; then
            git commit -m "EPG actualizado autom√°ticamente - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push
          else
            echo "No se encontraron cambios en el EPG. No se necesita commit."
          fi
=======
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 5. Configurar modo de ejecuci√≥n (si es manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Ejecuci√≥n manual detectada"
          if [ "${{ github.event.inputs.force_full_week }}" = "true" ]; then
            echo "Activando modo semana completa..."
            sed -i 's/"force_full_week": false/"force_full_week": true/' config.json
          fi
          
          if [ "${{ github.event.inputs.discover_channels }}" = "true" ]; then
            echo "Ejecutando auto-descubrimiento de canales..."
            python channel_discovery.py auto
          fi

      - name: 6. Ejecutar el motor principal para generar el EPG
        run: |
          echo "Iniciando generaci√≥n de EPG..."
          python main.py
          
          # Verificar que el archivo se gener√≥ correctamente
          if [ -f "epgpersonal.xml.gz" ]; then
            echo "‚úì Archivo EPG generado exitosamente"
            # Mostrar estad√≠sticas b√°sicas
            echo "Tama√±o del archivo: $(du -h epgpersonal.xml.gz | cut -f1)"
            echo "Programas encontrados: $(gunzip -c epgpersonal.xml.gz | grep -c '<programme' || echo '0')"
          else
            echo "‚ùå Error: No se gener√≥ el archivo EPG"
            exit 1
          fi

      - name: 7. Validar estructura del EPG generado
        run: |
          echo "Validando estructura XML..."
          # Verificar que el XML no est√© vac√≠o o corrupto
          if gunzip -t epgpersonal.xml.gz; then
            echo "‚úì Archivo GZIP v√°lido"
          else
            echo "‚ùå Error: Archivo GZIP corrupto"
            exit 1
          fi
          
          # Verificar estructura XML b√°sica
          if gunzip -c epgpersonal.xml.gz | head -5 | grep -q '<?xml version="1.0"'; then
            echo "‚úì Estructura XML v√°lida"
          else
            echo "‚ùå Error: Estructura XML inv√°lida"
            exit 1
          fi

      - name: 8. Generar reporte de ejecuci√≥n
        run: |
          echo "Generando reporte..."
          {
            echo "# üì∫ Reporte de Generaci√≥n EPG"
            echo "**Fecha:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            echo "**Modo:** ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Autom√°tico' }}"
            echo ""
            echo "## üìä Estad√≠sticas"
            echo "- **Archivo generado:** epgpersonal.xml.gz"
            echo "- **Tama√±o:** $(du -h epgpersonal.xml.gz | cut -f1)"
            echo "- **Programas:** $(gunzip -c epgpersonal.xml.gz | grep -c '<programme' || echo '0')"
            echo "- **Canales:** $(gunzip -c epgpersonal.xml.gz | grep -c '<channel' || echo '0')"
            echo ""
            echo "## üîó Descarga"
            echo "```"
            echo "https://raw.githubusercontent.com/${{ github.repository }}/main/epgpersonal.xml.gz"
            echo "```"
          } > reporte_epg.md
          
          echo "Reporte generado:"
          cat reporte_epg.md

      - name: 9. Subir la gu√≠a EPG actualizada al repositorio
        run: |
          git config --global user.name "EPG Bot"
          git config --global user.email "epg-bot@github-actions.com"
          
          # A√±adir archivos principales
          git add -f epgpersonal.xml.gz
          git add -f epg_generator.log
          
          # A√±adir reporte si existe
          if [ -f "reporte_epg.md" ]; then
            git add -f reporte_epg.md
          fi
          
          # A√±adir config.json si fue modificado por auto-discovery
          if ! git diff --quiet config.json; then
            git add config.json
            echo "config.json actualizado por auto-discovery"
          fi
          
          # Comprueba si hay cambios para commitear
          if ! git diff --staged --quiet; then
            TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
            PROGRAMS=$(gunzip -c epgpersonal.xml.gz | grep -c '<programme' || echo '0')
            CHANNELS=$(gunzip -c epgpersonal.xml.gz | grep -c '<channel' || echo '0')
            
            COMMIT_MSG="ü§ñ EPG actualizado autom√°ticamente - $TIMESTAMP
            
üìä Estad√≠sticas:
‚Ä¢ $PROGRAMS programas procesados
‚Ä¢ $CHANNELS canales actualizados
‚Ä¢ Modo: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Autom√°tico' }}"
            
            git commit -m "$COMMIT_MSG"
            git push
            
            echo "‚úÖ EPG actualizado y subido al repositorio"
          else
            echo "‚ÑπÔ∏è No se encontraron cambios en el EPG. No se necesita commit."
          fi

      - name: 10. Cleanup y logs finales
        if: always()
        run: |
          echo "=== LOGS DE EJECUCI√ìN ==="
          if [ -f "epg_generator.log" ]; then
            echo "Mostrando √∫ltimas 20 l√≠neas del log:"
            tail -20 epg_generator.log
          else
            echo "No se encontr√≥ archivo de log"
          fi
          
          echo ""
          echo "=== RESUMEN FINAL ==="
          if [ -f "epgpersonal.xml.gz" ]; then
            echo "‚úÖ Generaci√≥n exitosa"
            echo "üìÅ Archivo: epgpersonal.xml.gz ($(du -h epgpersonal.xml.gz | cut -f1))"
            echo "üì∫ URL: https://raw.githubusercontent.com/${{ github.repository }}/main/epgpersonal.xml.gz"
          else
            echo "‚ùå Generaci√≥n fall√≥"
            exit 1
          fi
>>>>>>> 4579a2458f3963379d3a81912c37959c4e62d611
